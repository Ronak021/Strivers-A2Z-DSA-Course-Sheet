class Solution {
    
    
  private:
  
    bool bfs(int node, vector<int> adj[], int vis[]){
      
      queue<pair<int,int>> q;
      
      q.push({node, -1});
      
      while(!q.empty()){
          
          int node = q.front().first;
          int parent=q.front().second;
          
          q.pop();
          
          for(auto ele: adj[node]) {
              if(!vis[ele]){
                  vis[ele]=1;
                  q.push({ele, node});
                }
              // if the ele is visited and its parent then dont do anything.
              // but if not parent and already visited then cycle is detected.
              else if(ele!=parent) return true;
              
            }
        }
        
        return false;
        
        
}
    
  public:
    bool isCycle(int V, vector<int> adj[]) {
        int vis[V]={0};
        
        for(int i=0; i<V; i++){
            
            
            if(!vis[i]){
                vis[i]=1;
                if(bfs(i, adj, vis)) return true;
            }
        }
        
        return false;
    }
};
