// Using BFS(Kahn's Algo)

class Solution{
    
    public:
      bool isCyclic(int V, vector<int> adj[]){
          
          
        vector<int> indegree(V,0);
        
        // calcaulating indegrres for all nodes
        for(int i=0; i<V; i++){
            for(auto ele: adj[i]){
                indegree[ele]++;
            }
        }
        
        queue<int> q;
        // If for node indegree is o Then pusing them innto the queue
        for(int i=0; i<V; i++){
            if(indegree[i]==0) q.push(i);
        }
        
        vector<int> ans;
        while(!q.empty()){
            
            int node=q.front();
            ans.push_back(node);
            q.pop();
            
            // for all the adjNodes of the current node do indegree--
            // And if its become 0 then push it into the queue.
            for(auto ele: adj[node]){
                indegree[ele]--;
                if(indegree[ele]==0)q.push(ele);
            }
        }
        
        if(ans.size()!=V) return true;
        return false;
      }
};
