// Using krushkal algo
class Solution
{
    
	public:
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        
        
        // 1. sort the adjList on the basis of wt
        // O(N+E)
        vector<pair<int, pair<int,int>>> edges;
        for(int i=0; i<V;i++){
            for(auto it: adj[i]){
                
                int node = i;
                int adjNode = it[0];
                int wt = it[1];
                
                edges.push_back({wt, {node, adjNode}});
            }
        }
        // O(E log E)
        sort(edges.begin(), edges.end());
        
        
        // 2. dsu
        DisjointSet ds(V); // to access the class.
        
        int sum=0;
        vector<pair<int, pair<int,int>>> mst;

      
        // O(E * 4 * alpha)
        for(auto it: edges){
            
            int wt= it.first;
            int u=it.second.first;
            int v=it.second.second;
                
            // now check is current edge can be added to the mst or not.
            // means check u and v are in same component or not.
            int ulp_u=ds.findUPar(u);
            int ulp_v=ds.findUPar(v);
            
            // if not same component
            if(ulp_u!=ulp_v){
                
                // connect them
                ds.unionBySize(u,v);
                mst.push_back({wt, {u,v}});
                sum+=wt;
            } 
            
            
        }
        
        return sum;
        
    }
};




