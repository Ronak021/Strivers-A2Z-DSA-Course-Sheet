
#include <bits/stdc++.h>
using namespace std;

class Solution {
    
  private:
    
    void dfs(int vis[], int node, vector <int> adj[], vector <int> &ls){
        
        vis[node]=1;
        ls.push_back(node);
        for(auto it: adj[node]){
            if(!vis[it]){
              
                dfs(vis, it, adj, ls);
            }
        }
        
    }
    
        
  public:
    // Function to return a list containing the DFS traversal of the graph.
    vector<int> dfsOfGraph(int V, vector<int> adj[]) {
        
        int vis[V]={0};
        int start = 0;

        
        vector<int> ls;

        dfs(vis, start, adj, ls);
        
        return ls;
    }
};


int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;

        vector<int> adj[V];

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        // string s1;
        // cin>>s1;
        Solution obj;
        vector<int> ans = obj.dfsOfGraph(V, adj);
        for (int i = 0; i < ans.size(); i++) {
            cout << ans[i] << " ";
        }
        cout << endl;
    }
    return 0;
}
