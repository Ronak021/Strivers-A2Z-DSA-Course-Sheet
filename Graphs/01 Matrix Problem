class Solution
{
public:
    vector<vector<int>> updateMatrix(vector<vector<int>> &mat)
    {
        int n = mat.size();
        int m = mat[0].size();
        queue<pair<int, int>> q;
        vector<vector<int>> dist(n, vector<int>(m, INT_MAX));

        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                if (mat[i][j] == 0)
                {
                    dist[i][j] = 0;
                    q.push({i, j});
                }
            }
        }
   
        vector<pair<int, int>> directions = {{-1, 0}, {0, -1}, {0, 1}, {1, 0}};

        while (!q.empty())
        {
            int row = q.front().first;
            int col = q.front().second;
            q.pop();

            for (auto dir : directions)
            {
                int nx = row + dir.first;
                int ny = col + dir.second;
                if (nx >= 0 && ny >= 0 && nx < n && ny < m)
                {
                    if (dist[nx][ny] > dist[row][col] + 1)
                    {
                        dist[nx][ny] = dist[row][col] + 1;
                        q.push({nx, ny});
                    }
                }
            }
        }

        return dist;
    }
};
