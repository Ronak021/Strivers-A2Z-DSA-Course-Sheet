//class Solution
// {
// 	public:
	
//     vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
//     {
//         //Min heap
//         priority_queue<pair<int, int>, vector<pair<int,int>>, greater<pair<int, int>>> pq;
        
//         pq.push({0, S}); //Source element
//         vector<int> dist(V, INT_MAX);
//         dist[S]=0;
        
//         while(!pq.empty()){
            
//             int dis=pq.top().first;
//             int node=pq.top().second;
//             pq.pop();
            
//             for(auto it: adj[node]){
//                 int adjNode=it[0];
//                 int edgeWeight=it[1];
                
//                 if(dist[adjNode] > dis + edgeWeight){
//                     dist[adjNode]=dis + edgeWeight;
//                     pq.push({dist[adjNode], adjNode});
//                 }
//             }
//         }
        
//         return dist;
//     }
    
// };
