class Solution {
public:
    int minimumEffortPath(vector<vector<int>>& heights) {

        int n = heights.size();
        int m = heights[0].size();
        priority_queue<pair<int, pair<int, int>>,
                       vector<pair<int, pair<int, int>>>,
                       greater<pair<int, pair<int, int>>>>
            pq;
        vector<vector<int>> dist(n, vector<int>(m, INT_MAX));
        dist[0][0] = 0;
        pq.push({0, {0, 0}});
        while (!pq.empty()) {
            auto it = pq.top();
            pq.pop();
            int dis = it.first;
            int row = it.second.first;
            int col = it.second.second;

            if(row==n-1 && col==m-1) return dis; 

            int delrow[] = {-1, 0, +1, 0};
            int delcol []= {0, +1, 0, -1};

            for (int i = 0; i < 4; i++) {
                int nx = delrow[i] + row;
                int ny = delcol[i] + col;

                if (nx >= 0 && ny >= 0 && nx < n && ny < m) {
                    int dif =
                        max(abs(heights[row][col] - heights[nx][ny]), dis);
                    if (dif < dist[nx][ny]) {
                        dist[nx][ny] = dif;
                        pq.push({dif, {nx, ny}});
                    }
                }
            }
        }

       return 0;
    };
};
