class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {

        vector<vector<pair<int,int>>> adj(n);
        for(int i=0; i<flights.size(); i++){
            int u=flights[i][0];
            int v=flights[i][1];
            int d=flights[i][2];
            adj[u].push_back({d, v});
        }
        queue<pair<int,pair<int,int>> > q;
        // {stop , {dist , node}} 
        q.push({0,{0, src}});
        vector<int> dist(n, INT_MAX);
        dist[src]=0;

        while(!q.empty()){
            auto it=q.front();
            int stops=it.first;
            int dis=it.second.first;
            int node=it.second.second;
            q.pop();

            if(stops > k) continue;
            for(auto ele: adj[node]){
                int wt=ele.first;
                int adjNode=ele.second;

                if(dist[adjNode] > wt + dis){
                    dist[adjNode] = wt + dis;
                    q.push({stops+1, {dist[adjNode], adjNode}});
                }
             
            }
        }

        if(dist[dst]==INT_MAX) return -1;
        return dist[dst];
    }
};
