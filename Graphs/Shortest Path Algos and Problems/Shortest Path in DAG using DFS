class Solution {
    
  private: 
    void dfs(int node, vector<int> &vis, vector<pair<int,int>> adj[], stack<int> &st){
        vis[node]=1;
        
        for(auto ele: adj[node]){
            if(!vis[ele.first]){
               
                dfs(ele.first, vis, adj, st);
            }
        }
        st.push(node);
        
    }
  public:
     vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
        
        vector<pair<int, int>> adj[N];
        // Create The adjList
        for(int i=0; i<M; i++){
            int u=edges[i][0];
            int v=edges[i][1];
            int wt=edges[i][2];
            
            adj[u].push_back({v,wt});
        }
        
        //Step 1. Apply the topo sort
        stack<int> st;
        vector<int> vis(N,0);
        for(int i=0; i<N; i++){
            if(!vis[i]){
                dfs(i, vis, adj, st);
            }
        }
        
        //Step 2. create the distance matrix then Relax the nodes of the stacks
        vector<int> dist(N, INT_MAX);
      
        dist[0]=0 ; // Source node
        while(!st.empty()){
            int node = st.top();
            st.pop();

            if (dist[node] != INT_MAX) {
                for (auto ele: adj[node]) {
                    int v = ele.first;
                    int wt = ele.second;
                    // Relaxation
                    if (dist[node] + wt < dist[v]) {
                        dist[v] = dist[node] + wt;
                    }
                }
            }
        }
        for(int i=0; i<N; i++) {
            if(dist[i]==INT_MAX) dist[i]=-1;
        }
        return dist;
    }
};
