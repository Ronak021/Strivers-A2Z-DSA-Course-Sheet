// class Solution {
//     int fun(int i, int j, vector<vector<int>>& grid, vector<vector<int>>
//     &dp){
//         if(i>=0 && j>=0 && grid[i][j]==1) return 0; // cell containing
//         obstacle if(i==0 && j==0) return 1;

//         if(dp[i][j]!=-1) return dp[i][j];
//         int up=0, left=0;
//         if(i>0) up = fun(i-1, j, grid, dp);
//         if(j>0) left=fun(i, j-1, grid, dp);

//         return dp[i][j] = up+left;
//     }
// public:
//     int uniquePathsWithObstacles(vector<vector<int>>& grid) {

//         int m = grid.size();
//         int n = grid[0].size();

//         vector<vector<int>> dp(m, vector<int>(n,-1));
//         return fun(m-1, n-1, grid, dp);
//     }
// };

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& grid) {

        int m = grid.size();
        int n = grid[0].size();

        vector<int> prev(n, 0);
        for (int i = 0; i < m; i++) {
            vector<int> cur(n, 0);
            for (int j = 0; j < n; j++) {
                if (i == 0 && j == 0 && grid[i][j]!=1)
                    cur[j] = 1;
                else if (i >= 0 && j >= 0 && grid[i][j] == 1)
                    cur[j] = 0;
                else {
                    int up = 0, left = 0;
                    if(i>0) up = prev[j];
                    if(j>0)left = cur[j - 1];
                    cur[j] = up + left;
                }
            }
            prev = cur;
        }
        return prev[n - 1];
    }
};
