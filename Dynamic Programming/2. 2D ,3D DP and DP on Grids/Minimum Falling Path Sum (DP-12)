
// for recursion t.c is 3 ^ m (rows) because for each cell you are exploring
// three posibilities. s.c = o(n) rec ss for memoizaion t.c = o(m*n) and s.c =
// o(m*n) + o(m)  its also giving a tle
// class Solution {
// private:
//     int fun(int i, int j, vector<vector<int>>& matrix, vector<vector<int>>& dp) {
        
//         if(j < 0 || j==matrix[0].size()) return INT_MAX; // if element crosses the left and right boundry
      
//         if(i==matrix.size()-1) return matrix[i][j];   // if element is in last row
        
//         if(dp[i][j]!=-1) return dp[i][j];
//         // either go down, diagLeft, diagRight
//         int down=0, left=0, right=0;
//         down = fun(i+1, j, matrix, dp);
//         left = fun(i+1, j-1, matrix, dp);
//         right = fun(i+1, j+1, matrix, dp);

//         return dp[i][j] = min(down,min(left, right)) + matrix[i][j];
//     }

// public:
//     int minFallingPathSum(vector<vector<int>>& matrix) {

//         int m = matrix.size();
//         int n = matrix[0].size();
//         vector<vector<int>> dp(m, vector<int>(n,-1));
//         int mini = INT_MAX;
//         // Recursin for each elemnt in the first row
//         for(int col=0; col<m; col++){
//             mini = min(mini, fun(0, col, matrix, dp));
//         }
    
//     return mini;
//     }
// };




// t.c  = o(m*n) + o(n)for computing min
// s.c = o(m*n)
// class Solution {
// public:
//     int minFallingPathSum(vector<vector<int>>& matrix) {

//         int m = matrix.size();
//         int n = matrix[0].size();
//         vector<vector<int>> dp(m, vector<int>(n, 0));

//         // base condition
//         for (int j = 0; j < n; j++) {
//             dp[m - 1][j] = matrix[m - 1][j];
//         }

//         for (int i = m - 2; i >= 0; i--) {
//             for (int j = 0; j < n; j++) {
               
//                 int down = dp[i+1][j];
//                 int left = (j > 0) ? dp[i + 1][j - 1] : INT_MAX;
//                 int right = (j < n - 1) ? dp[i + 1][j + 1] : INT_MAX;
//                 dp[i][j] = matrix[i][j] + min(down, min(left, right));
//             }

//         }

    
//         int mini=INT_MAX;
//         // o(n) for this 
//          for (int j = 0; j < n; j++) {
//             mini = min(mini, dp[0][j]);
//         }

//         return mini;


//     }
// };


// space optimization
// t.c -> o(m*n) + o(n)
// s.c -> o(m)
class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {

        int m = matrix.size();
        int n = matrix[0].size();
        
        vector<int> prev(n,0);
        for (int j = 0; j < n; j++) {
            prev[j] = matrix[m - 1][j];
        }

        for (int i = m - 2; i >= 0; i--) {
            vector<int> cur(n,0);
            for (int j = 0; j < n; j++) {
               
                int down = prev[j];
                int left = (j > 0) ? prev[j-1] : INT_MAX;
                int right = (j < n - 1) ? prev[j + 1] : INT_MAX;
                cur[j] = matrix[i][j] + min(down, min(left, right));
            }
            prev = cur;
        }

        int mini=INT_MAX;
        // o(n) for this 
         for (int j = 0; j < n; j++) {
            mini = min(mini, prev[j]);
        }

        return mini;
    }
};
