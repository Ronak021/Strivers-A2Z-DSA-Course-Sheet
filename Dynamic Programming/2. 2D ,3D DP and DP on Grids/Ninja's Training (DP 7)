// class Solution {
    
//   private: 
//     int f(int day, int lastDoneTask,vector<vector<int>>& points, vector<vector<int>> &dp){
//         if(day==0) {
//             int maxi=0;
//             for(int task=0; task<3; task++){
//                 if(task!=lastDoneTask)  maxi=max(maxi, points[0][task]);
//             }
//             return maxi;
//         }
//         if(dp[day][lastDoneTask]!=-1) return dp[day][lastDoneTask];
//         int maxi=0;
//         for(int task=0; task<3; task++){
//             if(task!=lastDoneTask){
//                 int p = points[day][task] + f(day-1, task, points, dp);
//                 maxi = max(p, maxi);
//             }
//         }
//         return dp[day][lastDoneTask] = maxi;
//     }
//   public:
//     int maximumPoints(vector<vector<int>>& points, int n) {
        
//          // 2d vector of size n rows(days) and 4 coloms(tasks 0,1,2,3) intialized to -1.
//         vector<vector<int>> dp(n, vector<int>(4, -1));
        
//         // (day, lastDonetask)
//         // task 0-> first task...... task 3-> you are at 0th index you can pick any task.
//         int ans= f(n-1, 3, points, dp);
//         return ans;
//     }
// };


class Solution {
    public:
     int maximumPoints(vector<vector<int>>& points, int n){
         vector<vector<int>> dp(n, vector<int>(4, 0));
         
         dp[0][0] = max(points[0][1], points[0][2]);
          dp[0][1] = max(points[0][0], points[0][2]);
           dp[0][2] = max(points[0][0], points[0][1]);
            dp[0][3] = max(points[0][0], max(points[0][1], points[0][2]));
            
        for(int day=1; day<n; day++){
            for(int lastDoneTask = 0; lastDoneTask<4; lastDoneTask++){
                
                dp[day][lastDoneTask]=0;
                int maxi=0;
                for(int task=0; task<3; task++){
                    if(task!=lastDoneTask){
                        int p = points[day][task] + dp[day-1][task];
                         maxi = max(p, maxi);
                    }
                }
                dp[day][lastDoneTask] = maxi;
            }
        }
            
        return dp[n-1][3];
     }
    
};
