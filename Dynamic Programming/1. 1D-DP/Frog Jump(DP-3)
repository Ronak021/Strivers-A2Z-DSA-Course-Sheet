// class Solution {
//   private:
//     int fun(int idx, vector<int> &dp, vector<int>& height){
        
//         if(idx==0) return 0;
//         if(dp[idx]!=-1) return dp[idx];
        
//         int left = fun(idx-1,dp, height) + abs(height[idx]-height[idx-1]);
//         int right = INT_MAX;
//         if(idx>1) right = fun(idx-2,dp, height) + abs(height[idx]-height[idx-2]);
        
//         return dp[idx]=min(left, right);
//     }
//   public:
//     int minimumEnergy(vector<int>& height, int n) {
        
//         int ans=0;
//         vector<int> dp(n+1, -1);
//         int res=fun(n-1, dp, height);
//         return res;
//     }
// };


// Botom Up
// class Solution{
//     public:
//       int minimumEnergy(vector<int>& height, int n){
//         vector<int> dp(n, 0);
//         dp[0] = 0 ;    //base case 
    
//           for(int i=1; i<n; i++){
//               int left = dp[i-1] + abs(height[i-1]- height[i]);
//               int right = INT_MAX;
//               if(i>1) right = dp[i-2] + abs(height[i-2]- height[i]);
//               dp[i]=min(left, right);
//           }
           
//           return dp[n-1];
//       }
// };


// space optimization
class Solution{
    public:
       int minimumEnergy(vector<int>& height, int n){
        
        int prev=0;
        int prev2=0;
    
           for(int i=1; i<n; i++){
              int left = prev + abs(height[i-1]- height[i]);
              int right = INT_MAX;
              if(i>1) right = prev2+ abs(height[i-2]- height[i]);
              int curi=min(left, right);
              prev2=prev;
              prev=curi;
           }
           
           return prev;
       }
};
