class Solution {


private:
    int fun(int ind, int buy, int prof, vector<int>& prices,
    vector<vector<int>> &dp){

        if(ind>=prices.size()) return 0;

        if(dp[ind][buy]!=-1) return dp[ind][buy];

        if(buy==1){
            int op1 =  (-prices[ind]) + fun(ind+1, 0, prof, prices, dp); //buy stock - next guy cant by it so buy=0 
            int op2 =  0 + fun(ind+1, 1, prof, prices, dp);  // not but so next day can so buy =1
            prof=max(op1, op2); dp[ind][buy] = prof;
        }
        else {
            int op1 = prices[ind] + fun(ind+2, 1, prof, prices,dp); // sell
             int op2= 0 + fun(ind+1, 0, prof, prices,dp); // not sell
            prof=max(op1, op2);
            dp[ind][buy] = prof;
        }

        return dp[ind][buy] = prof;
    }
public:
    int maxProfit(vector<int>& prices) {
        
        int buy=1, prof=0;
        vector<vector<int>> dp(prices.size(), vector<int>(2,-1));
        return fun(0, buy, prof, prices, dp);
    }
};
