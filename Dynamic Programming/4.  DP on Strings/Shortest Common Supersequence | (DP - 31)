class Solution {
public:
    string shortestCommonSupersequence(string str1, string str2) {
        

        int n=str1.length(),  m=str2.length();
        vector<vector<int>> dp(n+1,vector<int>(m+1, 0));

        // if i<0 || j<0 return 0
        for(int i=0; i<=m; i++) dp[0][i]=0;
        for(int j=0; j<=n; j++) dp[j][0]=0;

        for(int i=1; i<=n; i++){
            for(int j=1; j<=m; j++){

                if(str1[i-1]==str2[j-1]) dp[i][j] = 1 + dp[i-1][j-1];
                else dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
            }
        }
 
        // Back tracking
        string temp = "";

        int i=n, j=m;
        while(i>0 && j>0){
            if(str1[i-1] == str2[j-1]){
                temp+=str1[i-1];
                i--;
                j--;
            }
            // move up
            else if(dp[i-1][j] > dp[i][j-1]){
                temp+=str1[i-1];
                i--;
            }
            // move side
            else {
                temp+=str2[j-1];
                j--;
            }
        }
        while(i>0) temp+=str1[i-1], i--;
        while(j>0) temp+=str2[j-1], j--;
        reverse(temp.begin(), temp.end());
        return temp;   
    }
};
