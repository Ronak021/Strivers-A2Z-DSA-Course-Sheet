// class Solution {
//     int fun(int i, int j, string &s, string &t, vector<vector<int>> &dp){

//         // if string 2 is done then is all charcs are compared
//         if(j<0) return 1;
//         // if first string is done means string 2 has some char to compare 
//         if(i<0) return 0;
        
//         if(dp[i][j]!=-1) return dp[i][j];
//         if(s[i] == t[j]) 
//         return dp[i][j] = fun(i-1, j-1, s, t, dp) +  fun(i-1, j, s, t, dp);

//         return dp[i][j] = fun(i-1, j, s, t, dp);
       
//     }
// public:
//     int numDistinct(string s, string t) {

//         int n=s.length();
//         int m=t.length();
//         vector<vector<int>> dp(n, vector<int> (m, -1));
//         return fun(n-1, m-1, s, t, dp);
//     }
// };



// class Solution {

// public:
//     int numDistinct(string s, string t) {
//         const int mod = 1e9 + 7;
//         int n=s.length();
//         int m=t.length();
//         vector<vector<int>> dp(n+1, vector<int> (m+1, 0));

//         // if j<0 return 1
//         for(int j=0;j<=n; j++) dp[j][0] = 1; 

//         for(int i=1; i<=n; i++){
//             for(int j=1; j<=m; j++){
//                 if(s[i-1] == t[j-1]) 
//                     dp[i][j] = (dp[i-1][j-1] +  dp[i-1][j]) % mod;

//                 else  dp[i][j] = dp[i-1][j];
//             }
//         }
        
//         return dp[n][m];
//     }
// };




class Solution {

public:
    int numDistinct(string s, string t) {
        const int mod = 1e9 + 7;
        int n=s.length();
        int m=t.length();
        vector<int> prev(m+1, 0), curr(m+1, 0);

        // when j<0
        prev[0]=curr[0] = 1; 

        for(int i=1; i<=n; i++){
            for(int j=1; j<=m; j++){
                if(s[i-1] == t[j-1]) 
                    curr[j] = (prev[j-1] +  prev[j]) % mod;

                else  curr[j] = prev[j];
            }
            prev=curr;
        }
        
        return prev[m];
    }
};
