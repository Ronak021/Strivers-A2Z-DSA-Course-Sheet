// class Solution {
// private:
//   int fun(int idx, int sum, int arr[],vector<vector<int>> &dp, int n) {
    

//     if(idx==0) {
//         if(sum==0 && arr[0]!=0) return 1;
//         if(sum==0 && arr[0]==0) return 2; // try out test case : 0 1 3 and sum=4 ,
//                                           // if you do not include this testcase then
//                                           // output = 1 insted of 2
//                                           // draw rec tree withot this cond.
//         return (arr[0]==sum);}



//     if(dp[idx][sum]!=-1) return dp[idx][sum];
//     int l=0;
//     if(arr[idx]<=sum) l =fun(idx - 1, sum-arr[idx], arr, dp, n); // take it
//     int r = fun(idx - 1, sum ,arr, dp, n); //not take it
    
//     return dp[idx][sum] = (l+r) % 1000000007;
//   }

// public:
//   int perfectSum(int arr[], int n, int sum) {
      
//     vector<vector<int>> dp(n, vector<int>(sum+1,-1));
//     return fun(n-1, sum, arr, dp, n);
    
   
//   }
// };


// class Solution{

// 	public:
	
// 	int mod = 1e9 + 7;
	
// 	int perfectSum(int arr[], int n, int sum){
	    
// 	    vector<vector<int>> dp(n + 1, vector<int>(sum + 1, 0));

//         // Base case: There's always one way to make the sum 0, by choosing no elements.
//         for (int i = 0; i <= n; i++) dp[i][0] = 1;

//         // Initializing for the first element
//         if (arr[0] <= sum) dp[1][arr[0]] = 1;
//         if (arr[0] == 0) dp[1][0] = 2;  // Special case for the first element being 0.

//         // Fill the dp table
//         for (int i = 2; i <= n; i++) {
//             for (int k = 0; k <= sum; k++) {
//                 int notTake = dp[i - 1][k];
//                 int take = 0;
//                 if (arr[i - 1] <= k) take = dp[i - 1][k - arr[i - 1]];
//                 dp[i][k] = (take + notTake) % mod;
//             }
//         }

//         return dp[n][sum];
       
// 	}
	  
// };



class Solution{

	public:
	
	int mod = 1e9 + 7;
	
	int perfectSum(int arr[], int n, int sum){
	    
	    vector<vector<int>> dp(n, vector<int>(sum + 1, 0));
        
        if (arr[0] == 0) dp[0][0] = 2; 
        else dp[0][0]=1;
        if ( arr[0]!=0 && arr[0] <= sum) dp[0][arr[0]] = 1;
      

        // Fill the dp table
        for (int i = 1; i < n; i++) {
            for (int k = 0; k <= sum; k++) {
                int notTake = dp[i - 1][k];
                int take = 0;
                if (arr[i] <= k) take = dp[i - 1][k - arr[i]];
                dp[i][k] = (take + notTake) % mod;
            }
        }

        return dp[n-1][sum];
       
	}
	  
};
