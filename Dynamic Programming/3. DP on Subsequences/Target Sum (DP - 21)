class Solution {
public:
    int findTargetSumWays(vector<int>& arr, int target) {
        
        int n = arr.size();
        int d = target;

        int sum=0;
	 for(int i: arr) sum+=i;
	    
	    
	   // just this much change on dp 17
	 if(sum -d < 0 ||(sum-d)%2 ) return 0; 
	 sum = (sum-d) / 2;
	    
	    vector<vector<int>> dp(n, vector<int>(sum + 1, 0));
        
        if (arr[0] == 0) dp[0][0] = 2; 
        else dp[0][0]=1;
        if ( arr[0]!=0 && arr[0] <= sum) dp[0][arr[0]] = 1;
      


        for (int i = 1; i < n; i++) {
            for (int k = 0; k <= sum; k++) {
                int notTake = dp[i - 1][k];
                int take = 0;
                if (arr[i] <= k) take = dp[i - 1][k - arr[i]];
                dp[i][k] = (take + notTake) ;
            }
        }

        return dp[n-1][sum];
    }
};
