    T.C -- O(n * cap),  S.C -- O(n*cap) + o(n) rec SS
// class Solution
// {
//     private:
//     int fun(int idx, int cap, int wt[], int val[], vector<vector<int>> &dp){
        
//         if(idx<0 || cap==0) return 0;
        
//         if(dp[idx][cap]!=-1) return dp[idx][cap];
//         if(wt[idx] <= cap) {
//             dp[idx][cap]= max(fun(idx-1,cap, wt,val, dp) , val[idx] + fun(idx-1, cap-wt[idx], wt, val, dp));
//             return dp[idx][cap];
//         }
        
//         if(wt[idx] > cap) return dp[idx][cap]=fun(idx-1, cap, wt, val, dp);
//     }
//     public:
//     int knapSack(int w, int wt[], int val[], int n) 
//     { 
//       vector<vector<int>> dp(n+1, vector<int>(w+1, -1));
//       return fun(n-1, w, wt, val, dp);
//     }
// };


class Solution{
    public:
    int knapSack(int w, int wt[], int val[], int n) {
        vector<vector<int>> dp(n+1, vector<int>(w+1, -1));
       
        // base condition
        for(int i=0; i<n+1; i++){
            for(int j=0; j<w+1; j++){
                dp[i][j]=0;
            }
        }
        
        
        // Recursive call
        // idx -- i,   cap --- j
        for(int i=1; i<n+1; i++){
            for(int j=1; j<w+1; j++){
                if(wt[i-1]<=j) {
                    dp[i][j]=max(dp[i-1][j], val[i-1]+ dp[i-1][j-wt[i-1]]);
                }
                else {
                    dp[i][j]=dp[i-1][j];
                }
            }
        }
        
        
        return dp[n][w];
    }
    
    
};
