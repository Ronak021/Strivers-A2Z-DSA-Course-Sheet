// using level order
class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(root==nullptr) return 0;

        queue<TreeNode*> q;
        q.push(root);
        int depth=0;
        while(!q.empty()){
            depth++;
            int size = q.size();
            for(int i=0; i<size; i++){
                TreeNode* node = q.front();
                q.pop();
                if(node->left!=nullptr) q.push(node->left);
                if(node->right!=nullptr) q.push(node->right);
            }
        } 


        return depth;
    }
};


// using recursion

// class Solution {
// public:
//     int maxDepth(TreeNode* root) {
//         if(root==nullptr) return 0;

//         int lhs = maxDepth(root->left);
//         int rhs = maxDepth(root->right);
//         return 1+max(lhs, rhs);
//     }
// };
