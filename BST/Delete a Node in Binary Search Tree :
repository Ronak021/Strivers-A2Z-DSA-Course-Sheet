class Solution {
private:
    // Helper function to find the minimum node in the right subtree (in-order successor)
    TreeNode* findMin(TreeNode* root) {
        while (root->left != nullptr) {
            root = root->left;
        }
        return root;
    }

public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        if (root == nullptr) 
            return nullptr;

        // Traverse the tree to find the node to delete
        if (key < root->val) {
            root->left = deleteNode(root->left, key);
        } else if (key > root->val) {
            root->right = deleteNode(root->right, key);
        } else {
            // Node to be deleted found
            
            // Case 1: No child (Leaf Node)
            if (root->left == nullptr && root->right == nullptr) {
                delete root;
                return nullptr;
            }
            // Case 2: One child
            else if (root->left == nullptr) {
                TreeNode* temp = root->right;
                delete root;
                return temp;
            }
            else if (root->right == nullptr) {
                TreeNode* temp = root->left;
                delete root;
                return temp;
            }
            // Case 3: Two children
            else {
                TreeNode* temp = findMin(root->right); // Find the in-order successor
                root->val = temp->val; // Replace value
                root->right = deleteNode(root->right, temp->val); // Delete the successor node
            }
        }
        return root;
    }
};
